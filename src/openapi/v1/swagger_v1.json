{
  "openapi": "3.0.0",
  "info": {
    "title": "BilboMD Backend",
    "version": "1.8.3",
    "description": "API documentation for bilbomd-backend"
  },
  "servers": [
    {
      "url": "https://bilbomd.bl1231.als.lbl.gov/api/v1",
      "description": "production"
    },
    {
      "url": "http://localhost:3501/api/v1",
      "description": "development"
    }
  ],
  "paths": {
    "/auth/otp": {
      "post": {
        "summary": "Authenticate user with OTP",
        "description": "Authenticate a user by providing a one-time password (OTP).",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "otp": {
                    "type": "string",
                    "description": "The one-time password provided by the user.",
                    "example": 123456
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication successful. Returns an access token.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "description": "An access token for the authenticated user.",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Missing or invalid OTP.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message.",
                      "example": "OTP required."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid OTP or OTP has expired.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message.",
                      "example": "OTP has expired."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. An error occurred while processing the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message.",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "get": {
        "summary": "Refresh Access Token",
        "description": "Refreshes the access token using a valid refresh token.",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "cookie",
            "name": "jwt",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The refresh token received in a cookie."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful refresh.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "description": "The new access token."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid or missing refresh token.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Refresh token is invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Logout and Clear JWT Cookie",
        "description": "Logs out the user by clearing the JWT cookie.",
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "JWT cookie cleared successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "JWT cookie cleared successfully."
          }
        }
      }
    },
    "/register": {
      "post": {
        "summary": "Create a New User",
        "description": "Creates a new user with the provided username and email.",
        "tags": [
          "User Management"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "string",
                    "description": "The username of the new user."
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The email address of the new user."
                  }
                },
                "required": [
                  "user",
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "code": {
                      "type": "string",
                      "description": "Confirmation code for email verification."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid user data received.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Duplicate username or email found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Get all users",
        "description": "Retrieve a list of all users.",
        "tags": [
          "User Management"
        ],
        "responses": {
          "200": {
            "description": "A JSON array of user objects. Returns an empty array if no users are found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. Indicates an unexpected condition encountered on the server."
          }
        }
      }
    },
    "/users/{id}": {
      "patch": {
        "summary": "Update User",
        "description": "Updates an existing user's information.",
        "tags": [
          "User Management"
        ],
        "requestBody": {
          "description": "User object to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The ID of the user to update.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Invalid input or missing fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Duplicate username found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a user",
        "description": "Deletes a user by ID. Fails if the user has assigned jobs or if the user does not exist.",
        "tags": [
          "User Management"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the user to delete.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Confirmation message of deletion.",
                      "example": "Username johndoe with ID 12345 deleted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "User ID not provided or user has assigned jobs and cannot be deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message.",
                      "example": "User ID Required"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found or no user was deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message.",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get User by ID",
        "description": "Retrieves detailed information about a user by their unique identifier.",
        "tags": [
          "User Management"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Unique identifier of the user to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found and returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "User ID not provided or user with specified ID not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the user ID was not provided or not found.",
                      "example": "User ID required"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/verify": {
      "post": {
        "summary": "Verify New User",
        "description": "Verify a new user's registration using a confirmation code.",
        "tags": [
          "User Management"
        ],
        "requestBody": {
          "description": "The confirmation code to verify the new user.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "The confirmation code to verify the new user."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User verified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Invalid input or missing fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/verify/resend": {
      "post": {
        "summary": "Resend Verification Code",
        "description": "Resend a verification code to a user's email for account confirmation.",
        "tags": [
          "User Management"
        ],
        "requestBody": {
          "description": "The user's email to resend the verification code.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The user's email address for resending the verification code."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Verification code resent successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Invalid input or missing fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. No user with the provided email.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "title": "User",
        "required": [
          "username",
          "email"
        ],
        "properties": {
          "username": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "refreshToken": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "email": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Pending",
              "Active"
            ]
          },
          "active": {
            "type": "boolean"
          },
          "confirmationCode": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string"
              },
              "expiresAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "otp": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string"
              },
              "expiresAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "UUID": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "last_access": {
            "type": "string",
            "format": "date-time"
          },
          "jobs": {
            "type": "array",
            "items": {
              "type": "schemaobjectid"
            }
          },
          "_id": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BilboMDJob": {
        "title": "BilboMd",
        "required": [
          "title",
          "uuid",
          "data_file",
          "user",
          "psf_file",
          "crd_file",
          "const_inp_file",
          "rg_min",
          "rg_max"
        ],
        "properties": {
          "title": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          },
          "data_file": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Submitted",
              "Pending",
              "Running",
              "Completed",
              "Error"
            ]
          },
          "time_submitted": {
            "type": "string",
            "format": "date-time"
          },
          "time_started": {
            "type": "string",
            "format": "date-time"
          },
          "time_completed": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "type": "schemaobjectid"
          },
          "_id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "__t": {
            "type": "string"
          },
          "pdb_file": {
            "type": "string",
            "required": false
          },
          "psf_file": {
            "type": "string"
          },
          "crd_file": {
            "type": "string"
          },
          "const_inp_file": {
            "type": "string"
          },
          "conformational_sampling": {
            "type": "number",
            "enum": [
              1,
              2,
              3,
              4
            ]
          },
          "rg_min": {
            "type": "number"
          },
          "rg_max": {
            "type": "number"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [],
  "security": [
    {
      "bearerAuth": []
    }
  ]
}